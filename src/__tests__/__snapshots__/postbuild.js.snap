// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bootstrap correctly loads with defaults 1`] = `Array []`;

exports[`bootstrap correctly loads with user options 1`] = `
Array [
  Array [
    "user",
    Object {
      "events": Object {
        "foo": Object {
          "bar": [Function],
        },
      },
    },
  ],
]
`;

exports[`init options defaults 1`] = `
Array [
  Array [
    "foo",
  ],
  Array [
    "lorem",
  ],
]
`;

exports[`init options schema should invalidate empty options 1`] = `false`;

exports[`init options schema should invalidate empty options 2`] = `
Array [
  "\\"ignore[0]\\" is not allowed to be empty",
  "\\"processing.concurrency\\" must be greater than or equal to 1",
  "\\"processing.strategy\\" must be one of [sequential, parallel]",
  "\\"processing.strategy\\" is not allowed to be empty",
  "\\"extensions.txt.concurrency\\" must be greater than or equal to 1",
  "\\"extensions.txt.strategy\\" must be one of [sequential, parallel]",
  "\\"extensions.txt.strategy\\" is not allowed to be empty",
]
`;

exports[`init options schema should invalidate invalid options 1`] = `false`;

exports[`init options schema should invalidate invalid options 2`] = `
Array [
  "\\"events.on.load\\" is not allowed",
  "\\"events.html.content\\" is not allowed",
  "\\"events.txt.parse\\" is not allowed",
  "\\"processing.concurrency\\" must be greater than or equal to 1",
  "\\"processing.strategy\\" must be one of [sequential, parallel]",
  "\\"extensions.txt.concurrency\\" must be greater than or equal to 1",
  "\\"extensions.txt.strategy\\" must be one of [sequential, parallel]",
]
`;

exports[`init options schema should invalidate invalid tasks options 1`] = `false`;

exports[`init options schema should invalidate invalid tasks options 2`] = `
Array [
  "\\"foo.bar\\" must be a string",
  "\\"lorem\\" must be of type object",
]
`;

exports[`init options schema should invalidate options with incorrect data types 1`] = `false`;

exports[`init options schema should invalidate options with incorrect data types 2`] = `
Array [
  "\\"enabled\\" must be a boolean",
  "\\"report\\" must be a boolean",
  "\\"ignore\\" must be an array",
  "\\"events.on.bootstrap\\" must be of type function",
  "\\"events.html.parse\\" must be of type function",
  "\\"events.foo\\" must be of type object",
  "\\"events.txt.content\\" must be of type function",
  "\\"processing.concurrency\\" must be a number",
  "\\"processing.strategy\\" must be one of [sequential, parallel]",
  "\\"processing.strategy\\" must be a string",
  "\\"extensions.foo\\" must be of type object",
  "\\"extensions.txt.concurrency\\" must be a number",
  "\\"extensions.txt.strategy\\" must be one of [sequential, parallel]",
  "\\"extensions.txt.strategy\\" must be a string",
]
`;

exports[`init options schema should invalidate unknown options 1`] = `false`;

exports[`init options schema should invalidate unknown options 2`] = `
Array [
  "\\"unknown\\" is not allowed",
  "\\"invalid\\" is not allowed",
]
`;

exports[`init options schema should validate correct options 1`] = `true`;

exports[`init options schema should validate correct options 2`] = `Array []`;

exports[`init options schema should validate correct tasks options 1`] = `true`;

exports[`init options schema should validate correct tasks options 2`] = `Array []`;

exports[`init options schema should validate default options 1`] = `true`;

exports[`init options schema should validate default options 2`] = `Array []`;

exports[`process correctly runs with s:parallel c:1 1`] = `"read,process,write,read,process,write,read,process,write,read,process,write"`;

exports[`process correctly runs with s:parallel c:2 1`] = `"read,read,process,process,write,write,read,read,process,process,write,write"`;

exports[`process correctly runs with s:parallel c:3 1`] = `"read,read,read,process,process,process,write,write,write,read,process,write"`;

exports[`process correctly runs with s:sequential c:1 1`] = `"read,read,read,read,process,process,process,process,write,write,write,write"`;

exports[`process correctly runs with s:sequential c:2 1`] = `"read,read,read,read,process,process,process,process,write,write,write,write"`;

exports[`process correctly runs with s:sequential c:3 1`] = `"read,read,read,read,process,process,process,process,write,write,write,write"`;

exports[`run correctly ignores writing report file 1`] = `Array []`;

exports[`run correctly runs with default options 1`] = `
Array [
  Array [
    "Loaded 1/2 Processed 0/2 Wrote 0/2",
  ],
  Array [
    "Loaded 1/2 Processed 1/2 Wrote 0/2",
  ],
  Array [
    "Loaded 1/2 Processed 1/2 Wrote 1/2",
  ],
  Array [
    "Loaded 2/2 Processed 1/2 Wrote 1/2",
  ],
  Array [
    "Loaded 2/2 Processed 2/2 Wrote 1/2",
  ],
  Array [
    "Loaded 2/2 Processed 2/2 Wrote 2/2",
  ],
  Array [
    "Done processing 2 files saving a total of 5",
  ],
]
`;

exports[`run correctly writes report file 1`] = `
Array [
  Array [
    "postbuild.log.json",
    "[
  \\"report1\\",
  \\"report2\\"
]",
  ],
]
`;
